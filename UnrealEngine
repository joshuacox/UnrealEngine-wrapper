#!/bin/bash
: ${UNREAL_ENGINE_PATH:='/opt/UnrealEngine/Engine/'}
: ${UNREAL_EDITOR:="$(find $UNREAL_ENGINE_PATH/Binaries/Linux -type f -name 'UnrealEditor')"}
: ${UNREAL_BUILD_TOOL:="$(find $UNREAL_ENGINE_PATH/Binaries/DotNET/UnrealBuildTool -type f -name 'UnrealBuildTool')"}
: ${UNREAL_BUILD_DIR:="dist"}
: ${DOTNET_AUTOMATION_TOOL:="$(find $UNREAL_ENGINE_PATH/Binaries/DotNET/AutomationTool -type f -name 'AutomationTool')"}

SET_GAME=''
SET_SERVER=''
SET_LOG=''
SET_LEVEL=''
SET_HOST=''
debug=false
SET_SERVER_TYPE=0
SET_GAME_TYPE=0
HAS_SET_LEVEL=0
SET_GEN_SOLUTION=0
SET_BUILD=0
SET_COOK=0

horizontal_rule () {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

print_help () {
# no indentation for print_help on this multiline echo
horizontal_rule
echo "UnrealEditor CLI wrapper
Examples:
$0 -h
^ print this help screen

UnrealEngine -p ./PuzzlePlatforms.uproject
^ open project with the unreal editor

UnrealEngine -p ./PuzzlePlatforms.uproject --game --host '127.0.0.1' --log --debug
^ connect to localhost server

UnrealEngine -p ./PuzzlePlatforms.uproject --server --log --level '/Game/ThirdPerson/Maps/ThirdPersonMap'
^ be a server

UNREAL_ENGINE_PATH=/home/bob/UE5/Engine UnrealEngine -p ./PuzzlePlatforms.uproject
^ specify the path to unreal engine"
horizontal_rule
}

parse_opts () {
  ORIGINAL_OPTS=$@
  # Execute getopt on the arguments passed to this program, identified by the special character $@
  short_opts="ohg:slp:"
  long_opts="gen-solution,build,cook,open,help,host:,level:,debug,game,server,log,project:"
  PARSED_OPTIONS=$(getopt --alternative -n "$0" -o "$short_opts" --long "$long_opts" -- "$@")

  #Bad arguments, something has gone wrong with the getopt command.
  if [[ $? -ne 0 ]];
  then
    horizontal_rule
    echo  'bad argruments'
    exit 1
  fi

  # A little magic, necessary when using getopt.
  eval set -- "$PARSED_OPTIONS"

  opt_loop_count=1
  while true; do
    #sleep 1
    ((++opt_loop_count))
    if [[ $debug == true ]]; then
      echo $opt_loop_count
      echo $1
      echo $@
    fi
    case "$1" in
      -h|--help)
        print_help=true
        print_help
        exit 2
        shift;;
      --debug)
        debug=true
        set -x
        shift;;
      --build)
        export SET_BUILD=1
        shift;;
      --cook)
        export SET_COOK=1
        shift;;
      --gen-solution)
        export SET_GEN_SOLUTION=1
        shift;;
      -g|--game)
        export SET_GAME_TYPE=1
        export SET_GAME="-game"
        shift;;
      --host)
        export SET_HOST="$2"
        shift 2 ;;
      --level)
        HAS_SET_LEVEL=1
        export SET_LEVEL="$2"
        shift 2 ;;
      -s|--server)
        export SET_SERVER_TYPE=1
        export SET_SERVER='-server'
        shift;;
      -l|--log)
        export SET_LOG='-log'
        shift;;
      -o|--open)
        FOUND=$(find . -maxdepth 1 -type f -iname '*.uproject')
        NUM_FOUND=$(echo $FOUND | tr ' ' '\n' | wc -l)
        echo $FOUND | tr ' ' '\n'
        if [[ $NUM_FOUND -gt 1 ]]; then
          echo too many uprojects found
          exit 1
        fi
        if [[ -z $FOUND ]]; then
          echo uproject not found
          exit 1
        fi
        if [[ -f $FOUND ]]; then
          export TARGET=$(realpath $FOUND)
        else
          echo uproject in unknown format
          exit 1
        fi
        shift;;
      -p|--project)
        export TARGET=$(realpath $2)
        shift 2 ;;
      --)
        shift
        break;;
    esac
  done
  if [[ $SET_SERVER_TYPE == 1 && $HAS_SET_LEVEL == 0 ]]; then
    echo 'server type requires level'
    exit 1
  elif [[ $SET_SERVER_TYPE == 1 && $SET_GAME_TYPE == 1 ]]; then
    echo 'server and game type cannot be mixed'
    exit 1
  fi
}

startup_tests () {
# no indentation as these are copied directly from unreal-engine-5.sh
if [ "$(id -u)" -eq 0 ]; then
    echo "ERROR: Run this as an unprivileged user; not as root."
    return;
fi

if [ ! -d "${HOME}/.config/Epic/UnrealEngine/5.0/Intermediate/" ]; then
    mkdir -p "${HOME}/.config/Epic/UnrealEngine/5.0/Intermediate/"
fi

if [ ! -d "${HOME}/.cnfig/Epic/UnrealEngine/5.0/Intermediate/" ]; then
    mkdir -p "${HOME}/.cnfig/Epic/UnrealEngine/5.0/Intermediate/"
fi

# end of no indetation

  # Check the binaries
  if [[ -x $UNREAL_EDITOR ]]; then
    export UNREAL_EDITOR=$UNREAL_EDITOR
  else 
    echo "Unreal editor not executable or missing $UNREAL_EDITOR"
    exit 1
  fi
  
  if [[ -x $UNREAL_BUILD_TOOL ]]; then
    export UNREAL_BUILD_TOOL=$UNREAL_BUILD_TOOL
  else 
    echo "Unreal build tool not executable or missing $UNREAL_BUILD_TOOL"
    exit 1
  fi

  if [[ -x $DOTNET_AUTOMATION_TOOL ]]; then
    export DOTNET_AUTOMATION_TOOL=$DOTNET_AUTOMATION_TOOL
  else 
    echo "DOTnet automation tool not executable or missing $DOTNET_AUTOMATION_TOOL"
    exit 1
  fi

  if [[ -x /usr/bin/prime-run ]]; then
    export PRIME_RUN=/usr/bin/prime-run
  else 
    export PRIME_RUN=''
  fi
}


main () {
  startup_tests
  set -eu
  if [[ "$#" -gt 0 ]]; then
    parse_opts $@
    if [[ $SET_GEN_SOLUTION == 1 ]]; then
      # Thanks to Dagon1999 for these flags https://forums.unrealengine.com/t/generate-project-files-in-linux/1213557/2
      #$enginedir/Binaries/DotNET/UnrealBuildTool/UnrealBuildTool -projectfiles -vscode -project="$projectfile" -game -engine
      $PRIME_RUN $UNREAL_BUILD_TOOL -projectfiles -vscode -project="$TARGET" -game -engine
    elif [[ $SET_COOK == 1 ]]; then
      # Thanks to Dagon1999 for these flags https://forums.unrealengine.com/t/generate-project-files-in-linux/1213557/2
      #$enginedir/Binaries/Linux/UnrealEditor-Cmd "$projectfilepath" -run=cook -targetplatform=Linux -iterate -map=$map
      $PRIME_RUN $UNREAL_EDITOR "$TARGET" -run=cook -targetplatform=Linux -iterate -map="$SET_LEVEL" $SET_LOG
    elif [[ $SET_BUILD == 1 ]]; then
      # Thanks to Dagon1999 for these flags https://forums.unrealengine.com/t/generate-project-files-in-linux/1213557/2
      #$enginedir/Binaries/DotNET/AutomationTool/AutomationTool -ScriptsForProject="$projectfilepath" BuildCookRun -project="$projectfilepath" -noP4 -clientconfig=Shipping -serverconfig=Shipping -nocompile -nocompileeditor -installed -ue4exe=$enginedir/Binaries/Linux/UnrealEditor-Cmd -utf8output -platform=Linux -build -skipcook -compressed -stage -deploy -stagingdirectory=$builddir
      $PRIME_RUN $DOTNET_AUTOMATION_TOOL -ScriptsForProject="$TARGET" BuildCookRun -project="$TARGET" -noP4 -clientconfig=Shipping -serverconfig=Shipping -nocompile -nocompileeditor -installed -unrealexe=$UNREAL_EDITOR -utf8output -platform=Linux -build -skipcook -compressed -stage -deploy -stagingdirectory=$UNREAL_BUILD_DIR
    elif [[ $SET_SERVER_TYPE == 1 && $SET_GAME_TYPE == 0 ]]; then
      # Server type
      $PRIME_RUN $UNREAL_EDITOR "$TARGET" "$SET_LEVEL" $SET_SERVER $SET_LOG
    elif [[ $SET_SERVER_TYPE == 0 && $SET_GAME_TYPE == 1 ]]; then
      # Game type
      $PRIME_RUN $UNREAL_EDITOR "$TARGET" $SET_HOST $SET_GAME $SET_LOG
    elif [[ $SET_SERVER_TYPE == 0 && $SET_GAME_TYPE == 0 ]]; then
      # Open with Editor 
      $PRIME_RUN $UNREAL_EDITOR "$TARGET" $SET_LOG
    else
      echo 'Warning! unknown behavior! here is the command line if you want to try it on your own'
      echo $PRIME_RUN $UNREAL_EDITOR "$TARGET" "$SET_LEVEL" $SET_SERVER $SET_HOST $SET_GAME $SET_LOG
      exit 1
    fi
  else
    $PRIME_RUN gio launch "${HOME}/.local/share/applications/com.unrealengine.UE5Editor.desktop"
  fi
}

main $@
exit 0
